import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { 
  DocumentTextIcon, 
  CurrencyDollarIcon, 
  ShieldCheckIcon, 
  TruckIcon,
  ClockIcon,
  StarIcon,
  ExclamationCircleIcon,
  ChartBarIcon,
  ArrowTrendingUpIcon
} from '@heroicons/react/24/outline';
import { 
  Chart as ChartJS, 
  CategoryScale, 
  LinearScale, 
  PointElement, 
  LineElement, 
  BarElement,
  Title, 
  Tooltip, 
  Legend,
  ArcElement,
  RadialLinearScale
} from 'chart.js';
import { Bar, Pie, Radar, Line } from 'react-chartjs-2';
import api from '../../services/api';
import { toast } from 'react-toastify';

// Registrar componentes do Chart.js
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  RadialLinearScale
);

const BudgetPage = () => {
  const { t } = useTranslation();
  const [loading, setLoading] = useState(true);
  const [budgets, setBudgets] = useState([]);
  const [budgetGroups, setBudgetGroups] = useState({});
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [productBudgets, setProductBudgets] = useState([]);
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterCategory, setFilterCategory] = useState('all');
  const [sortBy, setSortBy] = useState('issueDate');
  const [sortOrder, setSortOrder] = useState('desc');
  const [uniqueProducts, setUniqueProducts] = useState([]);
  const [uniqueCategories, setUniqueCategories] = useState([]);

  // Formatar valor monetário
  const formatCurrency = (value) => {
    return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(value);
  };

  // Formatar data
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('pt-BR');
  };

  // Carregar orçamentos
  useEffect(() => {
    const fetchBudgets = async () => {
      try {
        setLoading(true);
        
        // Tentar obter grupos de orçamentos primeiro
        let groupsResponse;
        try {
          groupsResponse = await api.get('/budget/groups');
          if (groupsResponse.data && groupsResponse.data.success && groupsResponse.data.data.groups) {
            setBudgetGroups(groupsResponse.data.data.groups);
          }
        } catch (groupError) {
          console.error('Erro ao carregar grupos de orçamentos:', groupError);
          // Continuar mesmo se falhar ao carregar grupos
        }
        
        // Carregar todos os orçamentos
        const response = await api.get('/budget/records');
        
        let budgetsData = [];
        
        if (response.data && response.data.data) {
          // Verificar se os dados retornados têm a estrutura esperada
          if (response.data.data.records && Array.isArray(response.data.data.records)) {
            budgetsData = response.data.data.records;
          } else if (Array.isArray(response.data.data)) {
            budgetsData = response.data.data;
          } else {
            console.error('Formato de dados inesperado:', response.data);
            toast.error(t('budget.errors.loadFailed'));
            budgetsData = getMockBudgets(); // Usar dados de exemplo
          }
        } else {
          // Dados de fallback para desenvolvimento
          budgetsData = getMockBudgets();
        }
        
        setBudgets(budgetsData);
        
        // Agrupar orçamentos por título se não conseguimos do backend
        if (!groupsResponse || !groupsResponse.data || !groupsResponse.data.success) {
          const groups = {};
          
          // Agrupar por título
          budgetsData.forEach(budget => {
            const title = budget.title.trim();
            if (!groups[title]) {
              groups[title] = [];
            }
            groups[title].push(budget);
          });
          
          // Filtrar apenas grupos com pelo menos 2 orçamentos
          const validGroups = {};
          Object.keys(groups).forEach(title => {
            if (groups[title].length >= 2) {
              validGroups[title] = groups[title];
            }
          });
          
          setBudgetGroups(validGroups);
        }
        
        // Extrair produtos únicos apenas de grupos válidos (com pelo menos 2 orçamentos)
        const groupProducts = Object.keys(budgetGroups);
        setUniqueProducts(groupProducts);
        
        // Extrair categorias únicas
        const categories = [...new Set(budgetsData.map(b => b.category).filter(Boolean))];
        setUniqueCategories(categories);
        
        // Selecionar o primeiro produto por padrão se houver grupos
        const groupKeys = Object.keys(validGroups);
        if (groupKeys.length > 0) {
          handleProductSelect(groupKeys[0]);
        }
        
        setLoading(false);
      } catch (error) {
        console.error('Erro ao carregar orçamentos:', error);
        toast.error(t('budget.errors.loadFailed'));
        setLoading(false);
        
        // Usar dados de exemplo em caso de erro
        const mockData = getMockBudgets();
        setBudgets(mockData);
        
        // Agrupar dados de exemplo
        const mockGroups = {};
        mockData.forEach(budget => {
          const title = budget.title.trim();
          if (!mockGroups[title]) {
            mockGroups[title] = [];
          }
          mockGroups[title].push(budget);
        });
        
        // Filtrar apenas grupos com pelo menos 2 orçamentos
        const validMockGroups = {};
        Object.keys(mockGroups).forEach(title => {
          if (mockGroups[title].length >= 2) {
            validMockGroups[title] = mockGroups[title];
          }
        });
        
        setBudgetGroups(validMockGroups);
        setUniqueProducts(Object.keys(validMockGroups));
        setUniqueCategories([...new Set(mockData.map(b => b.category).filter(Boolean))]);
        
        // Selecionar o primeiro produto por padrão
        const mockGroupKeys = Object.keys(validMockGroups);
        if (mockGroupKeys.length > 0) {
          handleProductSelect(mockGroupKeys[0]);
        }
      }
    };
    
    fetchBudgets();
  }, [t]);
  const calculateScores = (budgets) => {
    if (!budgets || budgets.length === 0) return [];
    
    return budgets.map(budget => {
      // Garantir que todos os valores necessários existam
      const safeReclameAquiScore = budget.reclameAquiScore || 0;
      const safeProductRating = budget.productRating || 0;
      const safeWarrantyMonths = budget.warrantyMonths || 0;
      const safeDeliveryTime = budget.deliveryTime || 0;
      
      // Pesos para cada critério
      const weights = {
        price: 0.35,
        warranty: 0.15,
        delivery: 0.15,
        reclameAqui: 0.20,
        productRating: 0.15
      };
      
      // Normalizar valores (quanto maior melhor)
      const minPrice = Math.min(...budgets.map(b => b.totalAmount || 0));
      const maxPrice = Math.max(...budgets.map(b => b.totalAmount || 0));
      const priceRange = maxPrice - minPrice;
      
      const priceScore = priceRange === 0 ? 1 : (maxPrice - (budget.totalAmount || 0)) / priceRange;
      const warrantyScore = safeWarrantyMonths / Math.max(...budgets.map(b => b.warrantyMonths || 0) || 1);
      const deliveryScore = (Math.max(...budgets.map(b => b.deliveryTime || 0)) - safeDeliveryTime) / 
                           (Math.max(...budgets.map(b => b.deliveryTime || 0)) - Math.min(...budgets.map(b => b.deliveryTime || 0)) || 1);
      const reclameAquiScore = safeReclameAquiScore / 10; // Normalizado para 0-1
      const productRatingScore = safeProductRating / 5; // Normalizado para 0-1
      
      // Calcular score total
      const totalScore = (
        priceScore * weights.price +
        warrantyScore * weights.warranty +
        deliveryScore * weights.delivery +
        reclameAquiScore * weights.reclameAqui +
        productRatingScore * weights.productRating
      ) * 100; // Converter para percentual
      
      return {
        ...budget,
        scores: {
          price: priceScore * 100,
          warranty: warrantyScore * 100,
          delivery: deliveryScore * 100,
          reclameAqui: reclameAquiScore * 100,
          productRating: productRatingScore * 100,
          total: totalScore
        }
      };
    });
  };
  
  // Carregar orçamentos
  useEffect(() => {
    const fetchBudgets = async () => {
      try {
        setLoading(true);
        
        // Tentar obter grupos de orçamentos primeiro
        let groupsResponse;
        try {
          groupsResponse = await api.get('/budget/groups');
          if (groupsResponse.data && groupsResponse.data.success && groupsResponse.data.data.groups) {
            setBudgetGroups(groupsResponse.data.data.groups);
          }
        } catch (groupError) {
          console.error('Erro ao carregar grupos de orçamentos:', groupError);
          // Continuar mesmo se falhar ao carregar grupos
        }
        
        // Carregar todos os orçamentos
        const response = await api.get('/budget/records');
        
        let budgetsData = [];
        
        if (response.data && response.data.data) {
          // Verificar se os dados retornados têm a estrutura esperada
          if (response.data.data.records && Array.isArray(response.data.data.records)) {
            budgetsData = response.data.data.records;
          } else if (Array.isArray(response.data.data)) {
            budgetsData = response.data.data;
          } else {
            console.error('Formato de dados inesperado:', response.data);
            toast.error(t('budget.errors.loadFailed'));
            budgetsData = getMockBudgets(); // Usar dados de exemplo
          }
        } else {
          // Dados de fallback para desenvolvimento
          budgetsData = getMockBudgets();
        }
        
        setBudgets(budgetsData);
        
        // Agrupar orçamentos por título se não conseguimos do backend
        if (!groupsResponse || !groupsResponse.data || !groupsResponse.data.success) {
          const groups = {};
          
          // Agrupar por título
          budgetsData.forEach(budget => {
            const title = budget.title.trim();
            if (!groups[title]) {
              groups[title] = [];
            }
            groups[title].push(budget);
          });
          
          // Filtrar apenas grupos com pelo menos 2 orçamentos
          const validGroups = {};
          Object.keys(groups).forEach(title => {
            if (groups[title].length >= 2) {
              validGroups[title] = groups[title];
            }
          });
          
          setBudgetGroups(validGroups);
        }
        
        // Extrair produtos únicos apenas de grupos válidos (com pelo menos 2 orçamentos)
        const groupProducts = Object.keys(budgetGroups);
        setUniqueProducts(groupProducts);
        
        // Extrair categorias únicas
        const categories = [...new Set(budgetsData.map(b => b.category).filter(Boolean))];
        setUniqueCategories(categories);
        
        // Selecionar o primeiro produto por padrão se houver grupos
        const groupKeys = Object.keys(budgetGroups);
        if (groupKeys.length > 0) {
          handleProductSelect(groupKeys[0]);
        }
      } catch (error) {
        console.error('Erro ao carregar orçamentos:', error);
        toast.error(t('budget.errors.loadFailed'));
        
        // Usar dados de exemplo em caso de erro
        const mockData = getMockBudgets();
        setBudgets(mockData);
        
        // Agrupar dados de exemplo
        const mockGroups = {};
        mockData.forEach(budget => {
          const title = budget.title.trim();
          if (!mockGroups[title]) {
            mockGroups[title] = [];
          }
          mockGroups[title].push(budget);
        });
        
        // Filtrar apenas grupos com pelo menos 2 orçamentos
        const validMockGroups = {};
        Object.keys(mockGroups).forEach(title => {
          if (mockGroups[title].length >= 2) {
            validMockGroups[title] = mockGroups[title];
          }
        });
        
        setBudgetGroups(validMockGroups);
        setUniqueProducts(Object.keys(validMockGroups));
        setUniqueCategories([...new Set(mockData.map(b => b.category).filter(Boolean))]);
        
        // Selecionar o primeiro produto por padrão
        const mockGroupKeys = Object.keys(validMockGroups);
        if (mockGroupKeys.length > 0) {
          handleProductSelect(mockGroupKeys[0]);
        }
        
        setLoading(false);
      }
    };
        const mockData = getMockBudgets();
        setBudgets(mockData);
        
        // Extrair produtos únicos
        const products = [...new Set(mockData.map(b => b.title))];
        setUniqueProducts(products);
        
        // Extrair categorias únicas
        const mockCategories = [...new Set(mockData.map(b => b.category))];
        setUniqueCategories(mockCategories);
        
        // Selecionar o primeiro produto por padrão
        if (products.length > 0) {
          handleProductSelect(products[0]);
        }
        
        setLoading(false);
      }
    };

    fetchBudgets();
  }, [t]);

  // Selecionar produto
  const handleProductSelect = (productTitle) => {
    setSelectedProduct(productTitle);
    
    if (productTitle && budgetGroups[productTitle]) {
      // Usar os orçamentos do grupo selecionado
      setProductBudgets(budgetGroups[productTitle]);
    } else {
      setProductBudgets([]);
    }
  };

  // Filtrar orçamentos
  const filteredBudgets = budgets.filter(budget => {
    if (filterStatus !== 'all' && budget.status !== filterStatus) return false;
    if (filterCategory !== 'all' && budget.category !== filterCategory) return false;
    return true;
  });

  // Ordenar orçamentos
  const sortedBudgets = [...filteredBudgets].sort((a, b) => {
    let comparison = 0;
    
    if (sortBy === 'issueDate') {
      comparison = new Date(a.issueDate) - new Date(b.issueDate);
    } else if (sortBy === 'totalAmount') {
      comparison = a.totalAmount - b.totalAmount;
    } else if (sortBy === 'title') {
      comparison = a.title.localeCompare(b.title);
    } else if (sortBy === 'provider') {
      comparison = (a.provider || '').localeCompare(b.provider || '');
    }
    
    return sortOrder === 'asc' ? comparison : -comparison;
  });

  // Manipular mudança de filtro de status
  const handleStatusFilterChange = (e) => {
    setFilterStatus(e.target.value);
  };

  // Manipular mudança de filtro de categoria
  const handleCategoryFilterChange = (e) => {
    setFilterCategory(e.target.value);
  };

  // Manipular mudança de ordenação
  const handleSortChange = (field) => {
    if (sortBy === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortBy(field);
      setSortOrder('desc');
    }
  };

  // Renderizar status com cor
  const renderStatus = (status) => {
    let statusClass = '';
    let statusText = '';

    switch (status) {
      case 'pendente':
        statusClass = 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
        statusText = t('budget.status.pending');
        break;
      case 'aprovado':
        statusClass = 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
        statusText = t('budget.status.approved');
        break;
      case 'rejeitado':
        statusClass = 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';
        statusText = t('budget.status.rejected');
        break;
      case 'em_analise':
        statusClass = 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';
        statusText = t('budget.status.analyzing');
        break;
      case 'expirado':
        statusClass = 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
        statusText = t('budget.status.expired');
        break;
      default:
        statusClass = 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
        statusText = status;
    }

    return (
      <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusClass}`}>
        {statusText}
      </span>
    );
  };

  // Dados de exemplo para desenvolvimento
  const getMockBudgets = () => {
    return [
      {
        id: '1',
        title: 'Notebook Dell Inspiron',
        provider: 'Dell Computadores',
        providerCNPJ: '72.381.189/0001-10',
        issueDate: '2025-05-15',
        validUntil: '2025-06-15',
        totalAmount: 4599.90,
        currency: 'BRL',
        status: 'pendente',
        category: 'tecnologia',
        paymentTerms: 'À vista ou em até 12x sem juros',
        deliveryTerms: 'Entrega em até 10 dias úteis',
        deliveryTime: 10,
        warranty: '12 meses',
        warrantyMonths: 12,
        reclameAquiScore: 7.8,
        productRating: 4.5,
        items: [
          {
            description: 'Notebook Dell Inspiron 15 3000',
            quantity: 1,
            unitPrice: 4599.90
          }
        ],
        notes: 'Inclui garantia de 1 ano',
        aiAnalysis: 'Este modelo tem boa relação custo-benefício para uso cotidiano e trabalho. A Dell é conhecida pela durabilidade de seus produtos.',
        aiRecommendation: 'Recomendo comparar com modelos similares da Lenovo e HP antes de decidir.',
        depreciation: 25, // % em 1 ano
        riskFactors: ['Modelo com mais de 6 meses no mercado'],
        shippingCost: 0
      },
      {
        id: '2',
        title: 'Notebook Lenovo Ideapad',
        provider: 'Lenovo Brasil',
        providerCNPJ: '07.275.920/0001-61',
        issueDate: '2025-05-18',
        validUntil: '2025-06-18',
        totalAmount: 4299.90,
        currency: 'BRL',
        status: 'pendente',
        category: 'tecnologia',
        paymentTerms: 'À vista com 10% de desconto ou em até 10x sem juros',
        deliveryTerms: 'Entrega em até 7 dias úteis',
        deliveryTime: 7,
        warranty: '12 meses',
        warrantyMonths: 12,
        reclameAquiScore: 8.2,
        productRating: 4.3,
        items: [
          {
            description: 'Notebook Lenovo Ideapad 3i',
            quantity: 1,
            unitPrice: 4299.90
          }
        ],
        notes: 'Inclui mochila para notebook',
        aiAnalysis: 'O Lenovo Ideapad oferece configurações similares ao Dell Inspiron, mas com preço um pouco menor. A marca tem boa reputação no mercado.',
        aiRecommendation: 'Este modelo apresenta melhor custo-benefício comparado ao Dell Inspiron, especialmente considerando o brinde da mochila.',
        depreciation: 28, // % em 1 ano
        riskFactors: [],
        shippingCost: 0
      },
      {
        id: '3',
        title: 'Notebook Dell Inspiron',
        provider: 'Magazine Luiza',
        providerCNPJ: '47.960.950/0001-21',
        issueDate: '2025-05-20',
        validUntil: '2025-06-20',
        totalAmount: 4799.90,
        currency: 'BRL',
        status: 'pendente',
        category: 'tecnologia',
        paymentTerms: 'À vista ou em até 10x sem juros',
        deliveryTerms: 'Entrega em até 15 dias úteis',
        deliveryTime: 15,
        warranty: '12 meses',
        warrantyMonths: 12,
        reclameAquiScore: 6.5,
        productRating: 4.5,
        items: [
          {
            description: 'Notebook Dell Inspiron 15 3000',
            quantity: 1,
            unitPrice: 4799.90
          }
        ],
        notes: 'Frete grátis para todo o Brasil',
        aiAnalysis: 'O preço está acima da média do mercado para este modelo. A Magazine Luiza tem pontuação média no ReclameAqui.',
        aiRecommendation: 'Não recomendado devido ao preço elevado e tempo de entrega maior que os concorrentes.',
        depreciation: 25, // % em 1 ano
        riskFactors: ['Preço acima da média', 'Tempo de entrega longo'],
        shippingCost: 0
      },
      {
        id: '4',
        title: 'Notebook HP Pavilion',
        provider: 'HP Brasil',
        providerCNPJ: '61.797.924/0001-55',
        issueDate: '2025-05-22',
        validUntil: '2025-06-22',
        totalAmount: 4499.90,
        currency: 'BRL',
        status: 'pendente',
        category: 'tecnologia',
        paymentTerms: 'À vista ou em até 12x sem juros',
        deliveryTerms: 'Entrega em até 5 dias úteis',
        deliveryTime: 5,
        warranty: '12 meses',
        warrantyMonths: 12,
        reclameAquiScore: 7.5,
        productRating: 4.2,
        items: [
          {
            description: 'Notebook HP Pavilion 15',
            quantity: 1,
            unitPrice: 4499.90
          }
        ],
        notes: 'Inclui Office 365 por 1 mês',
        aiAnalysis: 'O HP Pavilion oferece bom desempenho para tarefas cotidianas e trabalho. A HP tem bom suporte técnico no Brasil.',
        aiRecommendation: 'Boa opção com entrega rápida, mas verifique se as especificações atendem suas necessidades.',
        depreciation: 30, // % em 1 ano
        riskFactors: [],
        shippingCost: 0
      },
      {
        id: '5',
        title: 'Geladeira Brastemp Frost Free',
        provider: 'Magazine Luiza',
        providerCNPJ: '47.960.950/0001-21',
        issueDate: '2025-06-01',
        validUntil: '2025-06-30',
        totalAmount: 3499.90,
        currency: 'BRL',
        status: 'aprovado',
        category: 'eletrodomestico',
        paymentTerms: 'À vista ou em até 10x sem juros',
        deliveryTerms: 'Entrega em até 15 dias úteis',
        deliveryTime: 15,
        warranty: '12 meses',
        warrantyMonths: 12,
        reclameAquiScore: 6.5,
        productRating: 4.7,
        items: [
          {
            description: 'Geladeira Brastemp Frost Free 375L',
            quantity: 1,
            unitPrice: 3499.90
          }
        ],
        aiAnalysis: 'A Brastemp é uma marca premium de eletrodomésticos com boa durabilidade. Este modelo tem bom consumo energético (Classe A).',
        aiRecommendation: 'Bom investimento considerando a durabilidade média de 10 anos deste modelo.',
        depreciation: 15, // % em 1 ano
        riskFactors: [],
        shippingCost: 120
      },
      {
        id: '6',
        title: 'Geladeira Electrolux Frost Free',
        provider: 'Casas Bahia',
        providerCNPJ: '33.041.260/0652-90',
        issueDate: '2025-06-02',
        validUntil: '2025-07-02',
        totalAmount: 3299.90,
        currency: 'BRL',
        status: 'rejeitado',
        category: 'eletrodomestico',
        paymentTerms: 'À vista ou em até 12x sem juros',
        deliveryTerms: 'Entrega em até 10 dias úteis',
        deliveryTime: 10,
        warranty: '12 meses',
        warrantyMonths: 12,
        reclameAquiScore: 7.2,
        productRating: 4.5,
        items: [
          {
            description: 'Geladeira Electrolux Frost Free 382L',
            quantity: 1,
            unitPrice: 3299.90
          }
        ],
        aiAnalysis: 'A Electrolux oferece bom custo-benefício. Este modelo tem capacidade ligeiramente maior que o modelo Brastemp comparável.',
        aiRecommendation: 'Melhor custo-benefício comparado ao modelo Brastemp, com 7L a mais de capacidade e preço menor.',
        depreciation: 18, // % em 1 ano
        riskFactors: [],
        shippingCost: 150
      },
      {
        id: '7',
        title: 'Geladeira Electrolux Frost Free',
        provider: 'Fast Shop',
        providerCNPJ: '43.708.379/0001-00',
        issueDate: '2025-06-03',
        validUntil: '2025-07-03',
        totalAmount: 3399.90,
        currency: 'BRL',
        status: 'pendente',
        category: 'eletrodomestico',
        paymentTerms: 'À vista com 5% de desconto ou em até 10x sem juros',
        deliveryTerms: 'Entrega em até 7 dias úteis',
        deliveryTime: 7,
        warranty: '12 meses',
        warrantyMonths: 12,
        reclameAquiScore: 8.5,
        productRating: 4.5,
        items: [
          {
            description: 'Geladeira Electrolux Frost Free 382L',
            quantity: 1,
            unitPrice: 3399.90
          }
        ],
        aiAnalysis: 'A Fast Shop tem excelente reputação no ReclameAqui e oferece entrega mais rápida que os concorrentes.',
        aiRecommendation: 'Apesar do preço um pouco maior que na Casas Bahia, a melhor reputação da loja e entrega mais rápida justificam a diferença.',
        depreciation: 18, // % em 1 ano
        riskFactors: [],
        shippingCost: 0
      }
    ];
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-500"></div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="md:flex md:items-center md:justify-between mb-6">
        <div className="flex-1 min-w-0">
          <h2 className="text-2xl font-bold leading-7 text-gray-900 dark:text-white sm:text-3xl sm:truncate font-inter">
            {t('budget.title')}
          </h2>
          <p className="mt-1 text-sm text-gray-500 dark:text-gray-400 font-inter">
            {t('budget.insights.description')}
          </p>
        </div>
      </div>

      {/* Filtros e seleção de produto */}
      <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label htmlFor="product-select" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 font-inter">
              Selecionar Produto
            </label>
            <select
              id="product-select"
              className="border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 w-full bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 font-inter"
              value={selectedProduct || ''}
              onChange={(e) => handleProductSelect(e.target.value)}
            >
              {uniqueProducts.map((product) => (
                <option key={product} value={product}>
                  {product}
                </option>
              ))}
            </select>
          </div>
          
          <div>
            <label htmlFor="filter-status" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 font-inter">
              {t('budget.filterByStatus')}
            </label>
            <select
              id="filter-status"
              className="border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 w-full bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 font-inter"
              value={filterStatus}
              onChange={handleStatusFilterChange}
            >
              <option value="all">{t('common.all')}</option>
              <option value="pendente">{t('budget.status.pending')}</option>
              <option value="aprovado">{t('budget.status.approved')}</option>
              <option value="rejeitado">{t('budget.status.rejected')}</option>
              <option value="em_analise">{t('budget.status.analyzing')}</option>
              <option value="expirado">{t('budget.status.expired')}</option>
            </select>
          </div>
          
          <div>
            <label htmlFor="filter-category" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 font-inter">
              Filtrar por Categoria
            </label>
            <select
              id="filter-category"
              className="border border-gray-300 dark:border-gray-600 rounded-md px-3 py-2 w-full bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 font-inter"
              value={filterCategory}
              onChange={handleCategoryFilterChange}
            >
              <option value="all">{t('common.all')}</option>
              {uniqueCategories.map((category) => (
                <option key={category} value={category}>
                  {category}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* Parte 2: Visão Geral do Produto Orçado */}
      {selectedProduct && productBudgets.length >= 2 && (
        <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 font-inter">
            Visão Geral do Grupo de Orçamentos
          </h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <h4 className="text-lg font-medium text-gray-900 dark:text-white font-inter">
                  {selectedProduct}
                </h4>
                <p className="text-sm text-gray-500 dark:text-gray-400 font-inter">
                  Categoria: <span className="font-medium">{productBudgets[0].category}</span>
                </p>
              </div>
              
              <div className="flex items-center space-x-2">
                <DocumentTextIcon className="h-5 w-5 text-blue-500" />
                <span className="text-sm text-gray-700 dark:text-gray-300 font-inter">
                  {productBudgets.length} orçamentos disponíveis
                </span>
              </div>
              
              <div className="flex items-center space-x-2">
                <ClockIcon className="h-5 w-5 text-blue-500" />
                <span className="text-sm text-gray-700 dark:text-gray-300 font-inter">
                  Orçamento mais recente: {formatDate(productBudgets.sort((a, b) => new Date(b.issueDate) - new Date(a.issueDate))[0].issueDate)}
                </span>
              </div>
              
              <div className="flex items-center space-x-2">
                <CurrencyDollarIcon className="h-5 w-5 text-blue-500" />
                <span className="text-sm text-gray-700 dark:text-gray-300 font-inter">
                  Faixa de preço: {formatCurrency(Math.min(...productBudgets.map(b => b.totalAmount)))} - {formatCurrency(Math.max(...productBudgets.map(b => b.totalAmount)))}
                </span>
              </div>
            </div>
            
            <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
              <h4 className="text-sm font-medium text-gray-900 dark:text-white mb-2 font-inter">
                Resumo da IA
              </h4>
              <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
                {productBudgets.length >= 2 ? (
                  <>
                    Você tem {productBudgets.length} orçamentos para {selectedProduct}. 
                    A diferença entre o menor e maior preço é de {formatCurrency(Math.max(...productBudgets.map(b => b.totalAmount)) - Math.min(...productBudgets.map(b => b.totalAmount)))}, 
                    o que representa uma variação de {Math.round(((Math.max(...productBudgets.map(b => b.totalAmount)) - Math.min(...productBudgets.map(b => b.totalAmount))) / Math.min(...productBudgets.map(b => b.totalAmount)) * 100))}
                    %.
                    {productBudgets.some(b => b.reclameAquiScore) && (
                      <> O fornecedor {productBudgets.sort((a, b) => (b.reclameAquiScore || 0) - (a.reclameAquiScore || 0))[0].provider} tem a melhor reputação no ReclameAqui.</>
                    )}
                    {productBudgets.some(b => b.deliveryTime) && (
                      <> O fornecedor {productBudgets.sort((a, b) => (a.deliveryTime || 999) - (b.deliveryTime || 999))[0].provider} oferece o menor prazo de entrega.</>
                    )}
                    <br/><br/>
                    <strong>Recomendação:</strong> O fornecedor {productBudgets.sort((a, b) => a.totalAmount - b.totalAmount)[0].provider} oferece o melhor preço, mas considere também a reputação e prazo de entrega antes de decidir.
                  </>
                ) : (
                  <>
                    Você tem apenas 1 orçamento para {selectedProduct}. Recomendamos buscar mais opções para comparação.
                  </>
                )}
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Parte 3: Tabela Comparativa entre Orçamentos */}
      {selectedProduct && productBudgets.length >= 2 && (
        <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 font-inter">
            Tabela Comparativa entre Orçamentos
          </h3>
          
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead className="bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider font-inter">
                    Fornecedor
                  </th>
                  <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider font-inter">
                    Preço
                  </th>
                  <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider font-inter">
                    <div className="flex items-center">
                      <ShieldCheckIcon className="h-4 w-4 mr-1" />
                      Garantia
                    </div>
                  </th>
                  <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider font-inter">
                    <div className="flex items-center">
                      <TruckIcon className="h-4 w-4 mr-1" />
                      Frete
                    </div>
                  </th>
                  <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider font-inter">
                    <div className="flex items-center">
                      <ClockIcon className="h-4 w-4 mr-1" />
                      Entrega
                    </div>
                  </th>
                  <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider font-inter">
                    <div className="flex items-center">
                      <StarIcon className="h-4 w-4 mr-1" />
                      ReclameAqui
                    </div>
                  </th>
                  <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider font-inter">
                    <div className="flex items-center">
                      <StarIcon className="h-4 w-4 mr-1" />
                      Nota Produto
                    </div>
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                {productBudgets.map((budget) => (
                  <tr key={budget.id} className="hover:bg-gray-50 dark:hover:bg-gray-700">
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900 dark:text-white font-inter">{budget.provider}</div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900 dark:text-white font-inter">{formatCurrency(budget.totalAmount)}</div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-500 dark:text-gray-400 font-inter">{budget.warranty}</div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-500 dark:text-gray-400 font-inter">
                        {budget.shippingCost === 0 ? (
                          <span className="text-green-600 dark:text-green-400">Grátis</span>
                        ) : (
                          formatCurrency(budget.shippingCost)
                        )}
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-500 dark:text-gray-400 font-inter">{budget.deliveryTime} dias</div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className={`text-sm font-medium font-inter ${
                          budget.reclameAquiScore >= 8 ? 'text-green-600 dark:text-green-400' :
                          budget.reclameAquiScore >= 6 ? 'text-yellow-600 dark:text-yellow-400' :
                          'text-red-600 dark:text-red-400'
                        }`}>
                          {budget.reclameAquiScore ? budget.reclameAquiScore.toFixed(1) : '0.0'}
                        </div>
                        <div className="ml-2 flex">
                          {[...Array(5)].map((_, i) => (
                            <StarIcon 
                              key={i} 
                              className={`h-4 w-4 ${
                                i < Math.round(budget.reclameAquiScore / 2) 
                                  ? 'text-yellow-400' 
                                  : 'text-gray-300 dark:text-gray-600'
                              }`} 
                            />
                          ))}
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="text-sm font-medium font-inter">{budget.productRating ? budget.productRating.toFixed(1) : '0.0'}</div>
                        <div className="ml-2 flex">
                          {[...Array(5)].map((_, i) => (
                            <StarIcon 
                              key={i} 
                              className={`h-4 w-4 ${
                                i < Math.floor(budget.productRating) 
                                  ? 'text-yellow-400' 
                                  : i < budget.productRating 
                                    ? 'text-yellow-400' 
                                    : 'text-gray-300 dark:text-gray-600'
                              }`} 
                            />
                          ))}
                        </div>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
      {/* Parte 4: Score de Oportunidade com IA */}
      {selectedProduct && productBudgets.length >= 2 && (
        <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 font-inter">
            Score de Oportunidade com IA
          </h3>
          
          {(() => {
            // Calcular scores para cada orçamento
            const scoredBudgets = calculateScores(productBudgets);
            
            // Ordenar por score total
            const sortedBudgets = [...scoredBudgets].sort((a, b) => b.scores.total - a.scores.total);
            const bestBudget = sortedBudgets[0];
            
            return (
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="lg:col-span-1">
                  <div className="bg-blue-50 dark:bg-blue-900 rounded-lg p-6 h-full">
                    <div className="flex justify-between items-center mb-4">
                      <h4 className="text-lg font-medium text-gray-900 dark:text-white font-inter">
                        Fornecedor Recomendado
                      </h4>
                      <div className="bg-blue-500 text-white text-lg font-bold rounded-full h-12 w-12 flex items-center justify-center">
                        {Math.round(bestBudget.scores.total)}
                      </div>
                    </div>
                    
                    <div className="mb-4">
                      <h5 className="text-xl font-bold text-gray-900 dark:text-white mb-1 font-inter">
                        {bestBudget.provider}
                      </h5>
                      <p className="text-lg font-medium text-blue-600 dark:text-blue-400 font-inter">
                        {formatCurrency(bestBudget.totalAmount)}
                      </p>
                    </div>
                    
                    <div className="space-y-2 mb-6">
                      <div className="flex items-center">
                        <ShieldCheckIcon className="h-5 w-5 text-blue-500 mr-2" />
                        <span className="text-sm text-gray-700 dark:text-gray-300 font-inter">
                          Garantia: {bestBudget.warranty}
                        </span>
                      </div>
                      <div className="flex items-center">
                        <TruckIcon className="h-5 w-5 text-blue-500 mr-2" />
                        <span className="text-sm text-gray-700 dark:text-gray-300 font-inter">
                          Entrega: {bestBudget.deliveryTime} dias
                        </span>
                      </div>
                      <div className="flex items-center">
                        <StarIcon className="h-5 w-5 text-blue-500 mr-2" />
                        <span className="text-sm text-gray-700 dark:text-gray-300 font-inter">
                          ReclameAqui: {bestBudget.reclameAquiScore ? bestBudget.reclameAquiScore.toFixed(1) : '0.0'}
                        </span>
                      </div>
                    </div>
                    
                    <div className="mt-4">
                      <h5 className="text-sm font-medium text-gray-900 dark:text-white mb-2 font-inter">
                        Justificativa da IA
                      </h5>
                      <p className="text-sm text-gray-600 dark:text-gray-300 font-inter">
                        {bestBudget.provider} oferece o melhor equilíbrio entre preço, garantia e tempo de entrega. 
                        {bestBudget.scores.price > 90 ? ' Destaca-se pelo excelente preço.' : ''}
                        {bestBudget.scores.reclameAqui > 85 ? ' A loja tem ótima reputação no ReclameAqui.' : ''}
                        {bestBudget.scores.delivery > 90 ? ' O prazo de entrega é um dos melhores disponíveis.' : ''}
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="lg:col-span-2">
                  <h4 className="text-lg font-medium text-gray-900 dark:text-white mb-4 font-inter">
                    Análise de Critérios
                  </h4>
                  
                  <div className="space-y-4">
                    {sortedBudgets.map((budget) => (
                      <div key={budget.id} className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                        <div className="flex justify-between items-center mb-2">
                          <h5 className="font-medium text-gray-900 dark:text-white font-inter">
                            {budget.provider}
                          </h5>
                          <div className="bg-blue-500 text-white font-bold rounded-full h-8 w-8 flex items-center justify-center text-sm">
                            {Math.round(budget.scores.total)}
                          </div>
                        </div>
                        
                        <div className="space-y-2">
                          <div>
                            <div className="flex justify-between text-xs mb-1">
                              <span className="text-gray-500 dark:text-gray-400 font-inter">Preço</span>
                              <span className="text-gray-700 dark:text-gray-300 font-inter">{Math.round(budget.scores.price)}%</span>
                            </div>
                            <div className="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
                              <div 
                                className="bg-blue-500 h-2 rounded-full" 
                                style={{ width: `${Math.round(budget.scores.price)}%` }}
                              ></div>
                            </div>
                          </div>
                          
                          <div>
                            <div className="flex justify-between text-xs mb-1">
                              <span className="text-gray-500 dark:text-gray-400 font-inter">Garantia</span>
                              <span className="text-gray-700 dark:text-gray-300 font-inter">{Math.round(budget.scores.warranty)}%</span>
                            </div>
                            <div className="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
                              <div 
                                className="bg-green-500 h-2 rounded-full" 
                                style={{ width: `${Math.round(budget.scores.warranty)}%` }}
                              ></div>
                            </div>
                          </div>
                          
                          <div>
                            <div className="flex justify-between text-xs mb-1">
                              <span className="text-gray-500 dark:text-gray-400 font-inter">Entrega</span>
                              <span className="text-gray-700 dark:text-gray-300 font-inter">{Math.round(budget.scores.delivery)}%</span>
                            </div>
                            <div className="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
                              <div 
                                className="bg-yellow-500 h-2 rounded-full" 
                                style={{ width: `${Math.round(budget.scores.delivery)}%` }}
                              ></div>
                            </div>
                          </div>
                          
                          <div>
                            <div className="flex justify-between text-xs mb-1">
                              <span className="text-gray-500 dark:text-gray-400 font-inter">ReclameAqui</span>
                              <span className="text-gray-700 dark:text-gray-300 font-inter">{Math.round(budget.scores.reclameAqui)}%</span>
                            </div>
                            <div className="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
                              <div 
                                className="bg-purple-500 h-2 rounded-full" 
                                style={{ width: `${Math.round(budget.scores.reclameAqui)}%` }}
                              ></div>
                            </div>
                          </div>
                          
                          <div>
                            <div className="flex justify-between text-xs mb-1">
                              <span className="text-gray-500 dark:text-gray-400 font-inter">Avaliação do Produto</span>
                              <span className="text-gray-700 dark:text-gray-300 font-inter">{Math.round(budget.scores.productRating)}%</span>
                            </div>
                            <div className="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
                              <div 
                                className="bg-pink-500 h-2 rounded-full" 
                                style={{ width: `${Math.round(budget.scores.productRating)}%` }}
                              ></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            );
          })()}
        </div>
      )}
      {/* Parte 5: Gráficos de Insights */}
      {selectedProduct && productBudgets.length > 1 && (
        <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 font-inter">
            Gráficos de Insights
          </h3>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Gráfico de barras de preços */}
            <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
              <h4 className="text-lg font-medium text-gray-900 dark:text-white mb-4 font-inter">
                <div className="flex items-center">
                  <ChartBarIcon className="h-5 w-5 text-blue-500 mr-2" />
                  Comparativo de Preços
                </div>
              </h4>
              <div className="h-64">
                <Bar 
                  data={{
                    labels: productBudgets.map(b => b.provider),
                    datasets: [
                      {
                        label: 'Preço (R$)',
                        data: productBudgets.map(b => b.totalAmount),
                        backgroundColor: 'rgba(59, 130, 246, 0.6)',
                        borderColor: 'rgb(59, 130, 246)',
                        borderWidth: 1
                      }
                    ]
                  }}
                  options={{
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                      legend: {
                        display: false
                      },
                      tooltip: {
                        callbacks: {
                          label: function(context) {
                            return formatCurrency(context.raw);
                          }
                        }
                      }
                    },
                    scales: {
                      y: {
                        beginAtZero: true,
                        ticks: {
                          callback: function(value) {
                            return formatCurrency(value);
                          }
                        }
                      }
                    }
                  }}
                />
              </div>
            </div>
            
            {/* Radar chart com comparativo de critérios */}
            <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
              <h4 className="text-lg font-medium text-gray-900 dark:text-white mb-4 font-inter">
                <div className="flex items-center">
                  <ChartBarIcon className="h-5 w-5 text-purple-500 mr-2" />
                  Comparativo de Critérios
                </div>
              </h4>
              <div className="h-64">
                <Radar 
                  data={{
                    labels: ['Preço', 'Garantia', 'Entrega', 'ReclameAqui', 'Avaliação'],
                    datasets: productBudgets.map((budget, index) => ({
                      label: budget.provider,
                      data: [
                        // Normalizar valores para escala 0-100
                        100 - ((budget.totalAmount - Math.min(...productBudgets.map(b => b.totalAmount))) / 
                              (Math.max(...productBudgets.map(b => b.totalAmount)) - Math.min(...productBudgets.map(b => b.totalAmount)) || 1) * 100),
                        (budget.warrantyMonths / Math.max(...productBudgets.map(b => b.warrantyMonths))) * 100,
                        100 - ((budget.deliveryTime - Math.min(...productBudgets.map(b => b.deliveryTime))) / 
                              (Math.max(...productBudgets.map(b => b.deliveryTime)) - Math.min(...productBudgets.map(b => b.deliveryTime)) || 1) * 100),
                        budget.reclameAquiScore * 10,
                        budget.productRating * 20
                      ],
                      backgroundColor: `rgba(${index * 70 + 50}, ${Math.abs(150 - index * 50)}, ${Math.abs(200 - index * 70)}, 0.2)`,
                      borderColor: `rgb(${index * 70 + 50}, ${Math.abs(150 - index * 50)}, ${Math.abs(200 - index * 70)})`,
                      pointBackgroundColor: `rgb(${index * 70 + 50}, ${Math.abs(150 - index * 50)}, ${Math.abs(200 - index * 70)})`,
                      pointBorderColor: '#fff',
                      pointHoverBackgroundColor: '#fff',
                      pointHoverBorderColor: `rgb(${index * 70 + 50}, ${Math.abs(150 - index * 50)}, ${Math.abs(200 - index * 70)})`
                    }))
                  }}
                  options={{
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                      r: {
                        angleLines: {
                          display: true
                        },
                        suggestedMin: 0,
                        suggestedMax: 100
                      }
                    }
                  }}
                />
              </div>
            </div>
            
            {/* Curva de depreciação do produto */}
            <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
              <h4 className="text-lg font-medium text-gray-900 dark:text-white mb-4 font-inter">
                <div className="flex items-center">
                  <ArrowTrendingUpIcon className="h-5 w-5 text-green-500 mr-2" />
                  Curva de Depreciação
                </div>
              </h4>
              <div className="h-64">
                <Line 
                  data={{
                    labels: ['Hoje', '6 meses', '1 ano', '18 meses', '2 anos'],
                    datasets: productBudgets.map((budget, index) => {
                      const depreciation = budget.depreciation / 100;
                      return {
                        label: budget.provider,
                        data: [
                          budget.totalAmount,
                          budget.totalAmount * (1 - depreciation/2),
                          budget.totalAmount * (1 - depreciation),
                          budget.totalAmount * (1 - depreciation*1.5),
                          budget.totalAmount * (1 - depreciation*2)
                        ],
                        borderColor: `rgb(${index * 70 + 50}, ${Math.abs(150 - index * 50)}, ${Math.abs(200 - index * 70)})`,
                        backgroundColor: `rgba(${index * 70 + 50}, ${Math.abs(150 - index * 50)}, ${Math.abs(200 - index * 70)}, 0.5)`,
                        tension: 0.3
                      };
                    })
                  }}
                  options={{
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                      tooltip: {
                        callbacks: {
                          label: function(context) {
                            return `${context.dataset.label}: ${formatCurrency(context.raw)}`;
                          }
                        }
                      }
                    },
                    scales: {
                      y: {
                        beginAtZero: false,
                        ticks: {
                          callback: function(value) {
                            return formatCurrency(value);
                          }
                        }
                      }
                    }
                  }}
                />
              </div>
            </div>
            
            {/* Gráfico de satisfação de clientes */}
            <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
              <h4 className="text-lg font-medium text-gray-900 dark:text-white mb-4 font-inter">
                <div className="flex items-center">
                  <StarIcon className="h-5 w-5 text-yellow-500 mr-2" />
                  Satisfação de Clientes
                </div>
              </h4>
              <div className="h-64">
                <Bar 
                  data={{
                    labels: productBudgets.map(b => b.provider),
                    datasets: [
                      {
                        label: 'ReclameAqui',
                        data: productBudgets.map(b => b.reclameAquiScore),
                        backgroundColor: 'rgba(124, 58, 237, 0.6)',
                        borderColor: 'rgb(124, 58, 237)',
                        borderWidth: 1
                      },
                      {
                        label: 'Avaliação do Produto',
                        data: productBudgets.map(b => b.productRating * 2), // Multiplicar por 2 para escala comparável
                        backgroundColor: 'rgba(245, 158, 11, 0.6)',
                        borderColor: 'rgb(245, 158, 11)',
                        borderWidth: 1
                      }
                    ]
                  }}
                  options={{
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                      y: {
                        beginAtZero: true,
                        max: 10,
                        title: {
                          display: true,
                          text: 'Pontuação (0-10)'
                        }
                      }
                    }
                  }}
                />
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Parte 6: Alertas de Risco e Recomendação Final */}
      {selectedProduct && productBudgets.length >= 2 && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          {/* Alertas de Risco */}
          <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
            <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 font-inter">
              <div className="flex items-center">
                <ExclamationCircleIcon className="h-6 w-6 text-red-500 mr-2" />
                Alertas de Risco
              </div>
            </h3>
            
            {(() => {
              // Identificar riscos em todos os orçamentos
              const allRisks = productBudgets.flatMap(budget => {
                const risks = [...(budget.riskFactors || [])];
                
                if (budget.reclameAquiScore < 6) {
                  risks.push(`${budget.provider} tem avaliação baixa no ReclameAqui (${budget.reclameAquiScore ? budget.reclameAquiScore.toFixed(1) : '0.0'})`);
                }
                
                if (budget.warrantyMonths < 12) {
                  risks.push(`${budget.provider} oferece garantia abaixo do padrão de mercado (${budget.warranty})`);
                }
                
                if (budget.deliveryTime > 15) {
                  risks.push(`${budget.provider} tem prazo de entrega longo (${budget.deliveryTime} dias)`);
                }
                
                if (budget.totalAmount > Math.min(...productBudgets.map(b => b.totalAmount)) * 1.2) {
                  risks.push(`${budget.provider} tem preço 20% acima da melhor oferta`);
                }
                
                return risks;
              });
              
              // Se não houver riscos, mostrar mensagem positiva
              if (allRisks.length === 0) {
                return (
                  <div className="bg-green-50 dark:bg-green-900 rounded-lg p-4">
                    <p className="text-green-800 dark:text-green-200 font-inter">
                      Não foram identificados riscos significativos nos orçamentos analisados.
                    </p>
                  </div>
                );
              }
              
              // Mostrar lista de riscos
              return (
                <div className="space-y-3">
                  {allRisks.map((risk, index) => (
                    <div key={index} className="bg-red-50 dark:bg-red-900 rounded-lg p-3 flex items-start">
                      <ExclamationCircleIcon className="h-5 w-5 text-red-500 mr-2 flex-shrink-0 mt-0.5" />
                      <p className="text-sm text-red-800 dark:text-red-200 font-inter">{risk}</p>
                    </div>
                  ))}
                </div>
              );
            })()}
          </div>
          
          {/* Recomendação Final */}
          {productBudgets.length >= 2 && (() => {
            // Calcular scores para cada orçamento (simplificado do componente anterior)
            const scoredBudgets = calculateScores(productBudgets);
            
            // Ordenar por score total
            const sortedBudgets = [...scoredBudgets].sort((a, b) => b.scores.total - a.scores.total);
            const bestBudget = sortedBudgets[0];
            
            return (
              <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
                <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 font-inter">
                  Recomendação Final
                </h3>
                
                <div className="bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg p-6 text-white">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h4 className="text-xl font-bold mb-1 font-inter">
                        {bestBudget.provider}
                      </h4>
                      <p className="text-lg font-inter">
                        {formatCurrency(bestBudget.totalAmount)}
                      </p>
                    </div>
                    <div className="bg-white text-blue-600 text-xl font-bold rounded-full h-14 w-14 flex items-center justify-center">
                      {Math.round(bestBudget.totalScore)}
                    </div>
                  </div>
                  
                  <p className="mb-6 font-inter">
                    {bestBudget.provider} oferece a melhor combinação de preço, garantia, tempo de entrega e reputação para {selectedProduct}.
                  </p>
                  
                  <div className="flex flex-col sm:flex-row gap-3">
                    <button className="bg-white text-blue-600 hover:bg-gray-100 px-4 py-2 rounded-lg font-medium flex items-center justify-center font-inter">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M10 2a4 4 0 00-4 4v1H5a1 1 0 00-.994.89l-1 9A1 1 0 004 18h12a1 1 0 00.994-1.11l-1-9A1 1 0 0015 7h-1V6a4 4 0 00-4-4zm2 5V6a2 2 0 10-4 0v1h4zm-6 3a1 1 0 112 0 1 1 0 01-2 0zm7-1a1 1 0 100 2 1 1 0 000-2z" clipRule="evenodd" />
                      </svg>
                      Comprar Agora
                    </button>
                    <button className="bg-transparent border border-white text-white hover:bg-white hover:bg-opacity-10 px-4 py-2 rounded-lg font-medium flex items-center justify-center font-inter">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z" />
                      </svg>
                      Compartilhar
                    </button>
                  </div>
                </div>
                
                <div className="mt-4 bg-yellow-50 dark:bg-yellow-900 rounded-lg p-4">
                  <h4 className="flex items-center text-sm font-medium text-yellow-800 dark:text-yellow-200 mb-2 font-inter">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                    </svg>
                    Dica Inteligente
                  </h4>
                  <p className="text-sm text-yellow-700 dark:text-yellow-300 font-inter">
                    {bestBudget.category === 'tecnologia' 
                      ? 'Produtos de tecnologia costumam ter promoções nos finais de semana e datas comemorativas. Considere aguardar se não houver urgência na compra.'
                      : bestBudget.category === 'eletrodomestico'
                      ? 'Eletrodomésticos frequentemente têm descontos em datas como Black Friday e Cyber Monday. Verifique se há alguma promoção próxima antes de finalizar a compra.'
                      : 'Compare os preços em diferentes lojas e verifique se há cupons de desconto disponíveis antes de finalizar sua compra.'}
                  </p>
                </div>
              </div>
            );
          })()}
        </div>
      )}
    </div>
  );
};

export default BudgetPage;
